"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã Telegram Bot."""

import asyncio

from aiogram import Bot, Dispatcher, types, html, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.formatting import as_list, as_marked_section, Bold, Text
from config.config_reader import Settings
from utils.basic_msg import error_msg
from utils.db.core import insert_user, get_all_users, check_registry_user, collect_errors, get_statistics
from utils.log import logger
from utils.ya_spell import use_yandexspeller

settings = Settings()

# –°–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
bot = Bot(
        token=settings.bot_token.get_secret_value()
)
dp = Dispatcher()


@dp.message(Command(commands=["help"]))
async def send_menu(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    msg = as_list(
            Bold("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"),
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
            "/registry - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "/help - –ü–æ–º–æ—â—å, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "/users - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "/statistics - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    )
    await message.reply(
            **msg.as_kwargs(),
            reply=False,
    )


@dp.message(Command("start"))
async def send_welcome(message: types.Message) -> None:
    """–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"""
    msg = Text(
            "–ü—Ä–∏–≤–µ—Ç ",
            Bold(f"{message.from_user.first_name}!\n"),
            "–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–∞!"
    )
    await message.reply(**msg.as_kwargs())

    if message.chat.type == "private":
        await registry_user(message)
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    await send_menu(message=message)


@dp.message(Command("registry"))
async def registry_user(message: types.Message) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_is_registry = await check_registry_user(
            user_id=message.from_user.id,
            group_chat_id=message.chat.id
    )

    if user_is_registry:
        await message.reply(
                "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
                reply=False
        )
        return

    await insert_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name,
            message.chat
    )

    await message.reply(
            f"""
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.bold(message.from_user.first_name)} –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            """.strip(),
            parse_mode=ParseMode.HTML

    )


@dp.message(Command("users"))
async def users(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    all_users = await get_all_users(message.chat.id)

    formatted_users = [
        Text(
                Bold("\nusername: "), f"{user.username}\n",
                Bold("first_name: "), f"{user.first_name}\n",
                Bold("last_name: "), f"{user.last_name}\n",
                "-------\n"
        ) for user in all_users
    ]

    msg = as_list(
            as_marked_section(
                    Bold("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"),
                    *formatted_users,
                    marker="üë§",
            )
    )

    await message.reply(**msg.as_kwargs())


@dp.message(Command("statistics"))
async def statistics(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_statistics = await get_statistics(message.chat.id)

    users_errors = [
        Text(
                Bold(f"{user[0]} : "),
                f"{user[1]} –æ—à–∏–±–∫–∏(–æ–∫)"
        ) for user in user_statistics
    ]
    msg = as_list(
            as_marked_section(
                    Bold("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"),
                    *users_errors,
                    marker="‚ñ™Ô∏è",
            )
    )

    await message.reply(
            **msg.as_kwargs(),
    )


@dp.message(F.text)
async def cmd_spell(message: types.Message) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ."""
    correct_text = message.text

    user_registry = await check_registry_user(
            user_id=message.from_user.id,
            group_chat_id=message.chat.id,
    )

    if not user_registry:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        return

    try:
        result = await use_yandexspeller(correct_text)
    except Exception as error:
        logger.exception(error)
        await message.reply(**error_msg())
        raise

    for bad_w, corr_w in result:
        await collect_errors(
                message.from_user.id,
                message.chat.id,
                bad_w,
                corr_w
        )

        if message.chat.type == "private":
            correct_text = correct_text.replace(
                    bad_w,
                    corr_w
            )

    if message.chat.type == "private":
        await message.answer(
                text=correct_text,
                parse_mode=ParseMode.HTML
        )


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
